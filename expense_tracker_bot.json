{
  "name": "expense tracker bot",
  "nodes": [
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.message }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1480,
        40
      ],
      "id": "85bef979-bf21-43b8-9330-8361ef3c1ea5",
      "name": "Telegram",
      "webhookId": "ef23b356-bbf8-41e3-bbb4-eabcf7c6572d",
      "credentials": {
        "telegramApi": {
          "id": "MSrbB78tEFVI8D8r",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "e09fde81-2d39-4be1-9a56-56699abc3e93",
      "name": "receivedMessage",
      "webhookId": "251466b7-da8f-4b07-83e5-65e02c0dca4b",
      "credentials": {
        "telegramApi": {
          "id": "MSrbB78tEFVI8D8r",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "sendMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "eb3b9796-e67b-4089-ae16-08f4d7608c4a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "31c8fc61-6553-4508-bdcf-b5aed9fa569b",
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "addRow",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "de964df6-ffa0-4adf-9f50-0dd08b4a4775",
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "getRows",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        480,
        0
      ],
      "id": "1ad07f3b-5777-47cd-9958-2e822cb3480f",
      "name": "Switch"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1-XNSuxIGXOehjDYhbKJcQVZdCqU7cpYfaZz6vvPAZww",
          "mode": "list",
          "cachedResultName": "Expanse tracker bot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-XNSuxIGXOehjDYhbKJcQVZdCqU7cpYfaZz6vvPAZww/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "May-2025",
          "mode": "name"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        780,
        300
      ],
      "id": "3d9d8503-25de-4eb6-ad1d-9a7aecd8b822",
      "name": "summary",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "F5Zrlms7Uf6QStg3",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1-XNSuxIGXOehjDYhbKJcQVZdCqU7cpYfaZz6vvPAZww",
          "mode": "list",
          "cachedResultName": "Expanse tracker bot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-XNSuxIGXOehjDYhbKJcQVZdCqU7cpYfaZz6vvPAZww/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $json.data.sheetName }}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $json.data.date }}",
            "Cost": "={{ $json.data.cost }}",
            "Description": "={{ $json.data.desc }}",
            "Category": "={{ $json.data.category }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Cost",
              "displayName": "Cost",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Category",
              "displayName": "Category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        780,
        60
      ],
      "id": "b15ea3bc-1188-4839-9f06-148f4e365fbb",
      "name": "addRow",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "F5Zrlms7Uf6QStg3",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data =$('messageParser').first().json.data;\n\nconst command  = data.command;\n\nif( command ==='/help'){\n  \n       const msg = `\n         Use below commands:\n          - /add to add entry in format: {cost}; {category}; {description}; {date}'\n          - /summary: to get summary\n          - /categories: to list of categories\n          - /help: to get help\n       `;\n  \n  return {\n    chatId: data.chatId,\n    message: msg\n  }\n}\nif( command ==='/categories'){\n  \n  return {\n    chatId: data.chatId,\n    message: `Available categories: ${data.categories.join(',')}`\n  }\n}\nelse if( command ==='/add'){\n  const msg = `${data.cost} added in ${data.category}`\n  \n  return {\n    chatId:data.chatId,\n    message: msg\n  }\n} else if(command=== '/summary'){\n  const items = $('summary').all();\n  const summary = {};\n\n  let total = 0;\n  \n  // Sum up categories\n  for (const item of items) {\n    const cat = item.json.Category;\n    const cost = Number(item.json.Cost) || 0;\n      total += cost;\n      if (!summary[cat]) {\n        summary[cat] = 0;\n    }\n    summary[cat] += cost;\n  }\n\n// Format message\nlet lines = [`ðŸ“Š Expense Summary (${new Date().toLocaleString('default', { month: 'long', year: 'numeric' })})\\n`];\n\nfor (const [cat, amount] of Object.entries(summary)) {\n  lines.push(`â€¢ ${cat}: â‚¹${amount}`);\n}\n\nlines.push(`â€¢ total: â‚¹${total}`);\n\n  \n  return {\n    chatId: data.chatId,\n    message: lines.join('\\n')\n  }\n}\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        40
      ],
      "id": "182ed7e1-33f9-4031-8d24-578e50d04037",
      "name": "responseGenerator"
    },
    {
      "parameters": {
        "jsCode": "const validCategories = [\n  \"recharge\",\n  \"rent-housing\",\n  \"food\",\n  \"tickets\",\n  // \"siddharaj\",\n  // \"divyesh\",\n  // \"vandu\",\n  // \"home-transfer\",\n  // \"shopping\",\n  // \"others\",\n  // \"petrol\",\n  // \"dhara\"\n]\n\nfunction getSheetName(d) {\n  const date = new Date(d || new Date());\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  const month = monthNames[date.getMonth()];\n  const year = date.getFullYear();\n\n  return `${month}-${year}`;\n}\n\nfunction parseExpenseMessage(text, chatId) {\n  const [command, ...rest] = text.trim().split(' ');\n  const payload = rest.join(' ').trim(); // \"100; rent; test;\"\n\n  const parts = payload.split(\";\").map(p => p.trim()).filter(p => p);\n  \n\n  if (command === '/help') {\n    return {\n      action: 'sendMessage',\n      data: {\n        chatId,\n        command,\n      }\n    };\n  } else if(command === '/summary') {\n    return {\n      action: 'getRows',\n      data: {\n        chatId,\n        command,\n      }\n    };\n  }\n  \n  else if (command === '/categories') {\n    return {\n      action: 'sendMessage',\n      data: {\n        chatId,\n        command,\n        categories: validCategories,\n      }\n    };\n  } else if (command === '/add') {\n    if (parts.length < 2) {\n      throw new Error(`Please provide at least cost and category. Received: ${parts}`);\n    }\n\n    const cost = parseFloat(parts[0]);\n    const category = parts[1];\n    const desc = parts[2] || '';\n    const date = parts[3] || new Date().toISOString().slice(0, 10); // YYYY-MM-DD\n\n    if (isNaN(cost)) {\n      throw new Error(\"Cost must be a number.\");\n    }\n\n    if (!validCategories.includes(category.toLowerCase())) {\n      throw new Error(\"Not a valid category.\");\n    }\n\n    return {\n      action: 'addRow',\n      data: {\n        chatId,\n        command,\n        sheetName: getSheetName(date),\n        cost,\n        category,\n        desc,\n        date,\n      }\n    };\n  }\n\n  throw new Error('Unknown command.');\n}\n\ntry{\n  const input = $input.first();\n  if (!input.json?.message?.text) {\n    throw new Error('Input item is missing message.text');\n  }\n  \n  return parseExpenseMessage(input.json.message.text, input.json.message.chat.id);  \n}\ncatch(e){\n  // send message or error message to end user\n  return {\n    action: 'sendMessage',\n    chatId: $input.first().json.message.chat.id,\n    text: 'Something went wrong!',\n  };\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        0
      ],
      "id": "e3fe41b4-254e-4d75-b56a-95fa39826b54",
      "name": "messageParser"
    }
  ],
  "pinData": {},
  "connections": {
    "receivedMessage": {
      "main": [
        [
          {
            "node": "messageParser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "responseGenerator",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "addRow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "addRow": {
      "main": [
        [
          {
            "node": "responseGenerator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "summary": {
      "main": [
        [
          {
            "node": "responseGenerator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "responseGenerator": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "messageParser": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c9e7e672-93f0-4f10-84c4-fa3de97b5500",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4aac93ec889b805449dd2db6b72db31cc3ac0fb410bbef1bba89a7f20b67e193"
  },
  "id": "LsQfhsMAzcIE21FV",
  "tags": []
}